============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.0.2, pluggy-1.4.0
rootdir: /mnt/e/VSCode/Applied ML/Assignment 3
plugins: cov-4.1.0, anyio-4.3.0
collected 2 items

test.py .E                                                               [100%]

==================================== ERRORS ====================================
_________________________ ERROR at setup of test_flask _________________________
file /mnt/e/VSCode/Applied ML/Assignment 3/test.py, line 68
  def test_flask(text, threshold):
E       fixture 'text' not found
>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/mnt/e/VSCode/Applied ML/Assignment 3/test.py:68

---------- coverage: platform linux, python 3.10.12-final-0 ----------
Name       Stmts   Miss  Cover
------------------------------
score.py      18      0   100%
------------------------------
TOTAL         18      0   100%

=========================== short test summary info ============================
ERROR test.py::test_flask
========================== 1 passed, 1 error in 4.53s ==========================
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.0.2, pluggy-1.4.0
rootdir: /mnt/e/VSCode/Applied ML/Assignment 3
plugins: cov-4.1.0, anyio-4.3.0
collected 2 items

test.py .E                                                               [100%]

==================================== ERRORS ====================================
_________________________ ERROR at setup of test_flask _________________________
file /mnt/e/VSCode/Applied ML/Assignment 3/test.py, line 68
  def test_flask(text, threshold):
E       fixture 'text' not found
>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/mnt/e/VSCode/Applied ML/Assignment 3/test.py:68

---------- coverage: platform linux, python 3.10.12-final-0 ----------
Name       Stmts   Miss  Cover
------------------------------
score.py      18      0   100%
------------------------------
TOTAL         18      0   100%

=========================== short test summary info ============================
ERROR test.py::test_flask
========================== 1 passed, 1 error in 4.62s ==========================
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.0.2, pluggy-1.4.0
rootdir: /mnt/e/VSCode/Applied ML/Assignment 3
plugins: cov-4.1.0, anyio-4.3.0
collected 2 items

test.py .E                                                               [100%]

==================================== ERRORS ====================================
_________________________ ERROR at setup of test_flask _________________________
file /mnt/e/VSCode/Applied ML/Assignment 3/test.py, line 68
  def test_flask(text, threshold):
E       fixture 'text' not found
>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/mnt/e/VSCode/Applied ML/Assignment 3/test.py:68

---------- coverage: platform linux, python 3.10.12-final-0 ----------
Name       Stmts   Miss  Cover
------------------------------
score.py      18      0   100%
------------------------------
TOTAL         18      0   100%

=========================== short test summary info ============================
ERROR test.py::test_flask
========================== 1 passed, 1 error in 4.48s ==========================
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.0.2, pluggy-1.4.0
rootdir: /mnt/e/VSCode/Applied ML/Assignment 3
plugins: cov-4.1.0, anyio-4.3.0
collected 2 items

test.py .E                                                               [100%]

==================================== ERRORS ====================================
_________________________ ERROR at setup of test_flask _________________________
file /mnt/e/VSCode/Applied ML/Assignment 3/test.py, line 68
  def test_flask(text, threshold):
E       fixture 'text' not found
>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/mnt/e/VSCode/Applied ML/Assignment 3/test.py:68

---------- coverage: platform linux, python 3.10.12-final-0 ----------
Name       Stmts   Miss  Cover
------------------------------
score.py      18      0   100%
------------------------------
TOTAL         18      0   100%

=========================== short test summary info ============================
ERROR test.py::test_flask
========================== 1 passed, 1 error in 3.78s ==========================
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.0.2, pluggy-1.4.0
rootdir: /mnt/e/VSCode/Applied ML/Assignment 3
plugins: cov-4.1.0, anyio-4.3.0
collected 2 items

test.py .E                                                               [100%]

==================================== ERRORS ====================================
_________________________ ERROR at setup of test_flask _________________________
file /mnt/e/VSCode/Applied ML/Assignment 3/test.py, line 68
  def test_flask(text, threshold):
E       fixture 'text' not found
>       available fixtures: anyio_backend, anyio_backend_name, anyio_backend_options, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, cov, doctest_namespace, monkeypatch, no_cover, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/mnt/e/VSCode/Applied ML/Assignment 3/test.py:68

---------- coverage: platform linux, python 3.10.12-final-0 ----------
Name       Stmts   Miss  Cover
------------------------------
score.py      18      0   100%
------------------------------
TOTAL         18      0   100%

=========================== short test summary info ============================
ERROR test.py::test_flask
========================== 1 passed, 1 error in 4.65s ==========================
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.0.2, pluggy-1.4.0
rootdir: /mnt/e/VSCode/Applied ML/Assignment 3
plugins: cov-4.1.0, anyio-4.3.0
collected 3 items

test.py ..F                                                              [100%]

=================================== FAILURES ===================================
_____________________________________ test _____________________________________

text = "URGENT: Exclusive Insurance Offer! Act Now to Secure Your Future! Limited Time Only: Claim Your Policy Before It's Too Late! Don't Miss Out on This Life-Saving Opportunity!"
threshold = 0.5

    def test(text, threshold):
>       t1 = text()
E       TypeError: 'str' object is not callable

test.py:114: TypeError

---------- coverage: platform linux, python 3.10.12-final-0 ----------
Name       Stmts   Miss  Cover
------------------------------
score.py      18      0   100%
------------------------------
TOTAL         18      0   100%

=========================== short test summary info ============================
FAILED test.py::test - TypeError: 'str' object is not callable
========================= 1 failed, 2 passed in 10.33s =========================
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.0.2, pluggy-1.4.0
rootdir: /mnt/e/VSCode/Applied ML/Assignment 3
plugins: cov-4.1.0, anyio-4.3.0
collected 3 items

test.py ..F                                                              [100%]

=================================== FAILURES ===================================
_____________________________________ test _____________________________________
Fixture "text" called directly. Fixtures are not meant to be called directly,
but are created automatically when test functions request them as parameters.
See https://docs.pytest.org/en/stable/explanation/fixtures.html for more information about fixtures, and
https://docs.pytest.org/en/stable/deprecations.html#calling-fixtures-directly about how to update your code.

---------- coverage: platform linux, python 3.10.12-final-0 ----------
Name       Stmts   Miss  Cover
------------------------------
score.py      18      0   100%
------------------------------
TOTAL         18      0   100%

=========================== short test summary info ============================
FAILED test.py::test - Failed: Fixture "text" called directly. Fixtures are n...
========================= 1 failed, 2 passed in 9.04s ==========================
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.0.2, pluggy-1.4.0
rootdir: /mnt/e/VSCode/Applied ML/Assignment 3
plugins: cov-4.1.0, anyio-4.3.0
collected 3 items

test.py ..F                                                              [100%]

=================================== FAILURES ===================================
_____________________________________ test _____________________________________
Fixture "text" called directly. Fixtures are not meant to be called directly,
but are created automatically when test functions request them as parameters.
See https://docs.pytest.org/en/stable/explanation/fixtures.html for more information about fixtures, and
https://docs.pytest.org/en/stable/deprecations.html#calling-fixtures-directly about how to update your code.

---------- coverage: platform linux, python 3.10.12-final-0 ----------
Name       Stmts   Miss  Cover
------------------------------
score.py      18      0   100%
------------------------------
TOTAL         18      0   100%

=========================== short test summary info ============================
FAILED test.py::test - Failed: Fixture "text" called directly. Fixtures are n...
========================= 1 failed, 2 passed in 9.01s ==========================
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.0.2, pluggy-1.4.0
rootdir: /mnt/e/VSCode/Applied ML/Assignment 3
plugins: cov-4.1.0, anyio-4.3.0
collected 3 items

test.py .FF                                                              [100%]

=================================== FAILURES ===================================
__________________________________ test_flask __________________________________

text = "URGENT: Exclusive Insurance Offer! Act Now to Secure Your Future! Limited Time Only: Claim Your Policy Before It's Too Late! Don't Miss Out on This Life-Saving Opportunity!"
threshold = 0.5

    def test_flask(text, threshold):
        # Start the Flask app using command line
        dir = os.path.dirname(os.path.abspath(__file__))
        filename = "app.py"
        full_path = os.path.join(dir, filename)
        flask_process = subprocess.Popen(["python3", full_path], stdout=subprocess.PIPE)
    
        # Wait for the server to start
        time.sleep(2)
    
        # Test the response from the localhost endpoint
        payload = {
>           'text': text(),
            'threshold': threshold()
        }
E       TypeError: 'str' object is not callable

test.py:90: TypeError
----------------------------- Captured stderr call -----------------------------
[31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5000
[33mPress CTRL+C to quit[0m
 * Restarting with stat
_____________________________________ test _____________________________________
Fixture "text" called directly. Fixtures are not meant to be called directly,
but are created automatically when test functions request them as parameters.
See https://docs.pytest.org/en/stable/explanation/fixtures.html for more information about fixtures, and
https://docs.pytest.org/en/stable/deprecations.html#calling-fixtures-directly about how to update your code.
----------------------------- Captured stdout call -----------------------------
Launching App
----------------------------- Captured stderr call -----------------------------
 * Debugger is active!
 * Debugger PIN: 112-381-940
Address already in use
Port 5000 is in use by another program. Either identify and stop that program, or start the server with a different port.

---------- coverage: platform linux, python 3.10.12-final-0 ----------
Name       Stmts   Miss  Cover
------------------------------
score.py      18      0   100%
------------------------------
TOTAL         18      0   100%

=========================== short test summary info ============================
FAILED test.py::test_flask - TypeError: 'str' object is not callable
FAILED test.py::test - Failed: Fixture "text" called directly. Fixtures are n...
========================= 2 failed, 1 passed in 8.69s ==========================
============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.0.2, pluggy-1.4.0
rootdir: /mnt/e/VSCode/Applied ML/Assignment 3
plugins: cov-4.1.0, anyio-4.3.0
collected 3 items

test.py ..F                                                              [100%]

=================================== FAILURES ===================================
_____________________________________ test _____________________________________

    def test():
        # Testing the app
        print('Launching App')
>       test_flask(text, threshold)

test.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
test.py:93: in test_flask
    response = requests.post('http://127.0.0.1:5000/score', json=payload)
/home/arvind/.local/lib/python3.10/site-packages/requests/api.py:115: in post
    return request("post", url, data=data, json=json, **kwargs)
/home/arvind/.local/lib/python3.10/site-packages/requests/api.py:59: in request
    return session.request(method=method, url=url, **kwargs)
/home/arvind/.local/lib/python3.10/site-packages/requests/sessions.py:575: in request
    prep = self.prepare_request(req)
/home/arvind/.local/lib/python3.10/site-packages/requests/sessions.py:486: in prepare_request
    p.prepare(
/home/arvind/.local/lib/python3.10/site-packages/requests/models.py:371: in prepare
    self.prepare_body(data, files, json)
/home/arvind/.local/lib/python3.10/site-packages/requests/models.py:511: in prepare_body
    body = complexjson.dumps(json, allow_nan=False)
/usr/lib/python3.10/json/__init__.py:238: in dumps
    **kw).encode(obj)
/usr/lib/python3.10/json/encoder.py:199: in encode
    chunks = self.iterencode(o, _one_shot=True)
/usr/lib/python3.10/json/encoder.py:257: in iterencode
    return _iterencode(o, 0)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <json.encoder.JSONEncoder object at 0x7f1a23c216c0>
o = <function text at 0x7f1a3cfb7760>

    def default(self, o):
        """Implement this method in a subclass such that it returns
        a serializable object for ``o``, or calls the base implementation
        (to raise a ``TypeError``).
    
        For example, to support arbitrary iterators, you could
        implement default like this::
    
            def default(self, o):
                try:
                    iterable = iter(o)
                except TypeError:
                    pass
                else:
                    return list(iterable)
                # Let the base class default method raise the TypeError
                return JSONEncoder.default(self, o)
    
        """
>       raise TypeError(f'Object of type {o.__class__.__name__} '
                        f'is not JSON serializable')
E       TypeError: Object of type function is not JSON serializable

/usr/lib/python3.10/json/encoder.py:179: TypeError
----------------------------- Captured stdout call -----------------------------
Launching App
----------------------------- Captured stderr call -----------------------------
[31m[1mWARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead.[0m
 * Running on http://127.0.0.1:5000
[33mPress CTRL+C to quit[0m
 * Restarting with stat

---------- coverage: platform linux, python 3.10.12-final-0 ----------
Name       Stmts   Miss  Cover
------------------------------
score.py      18      0   100%
------------------------------
TOTAL         18      0   100%

=========================== short test summary info ============================
FAILED test.py::test - TypeError: Object of type function is not JSON seriali...
========================= 1 failed, 2 passed in 7.76s ==========================
